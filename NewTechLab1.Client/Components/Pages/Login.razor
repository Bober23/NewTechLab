@page "/"
@using NewTechLab.DTOs
@using NewTechLab1.Client.Components.Layout
@inject NavigationManager _manager
@inject User _user
@if (DbIsOpen)
{
    <div style="width:100%; height:100%">
        <MudPaper Class="pa-8" Style="max-width:fit-content;margin:auto;margin-top:15%" Square="true">
            <h3>Вход</h3>
            <MudTextField @bind-Value="@LoginString" ErrorText="Учетная запись заблокирована" Error="LoginError" Label="Логин"></MudTextField>
            <MudTextField @bind-Value="@Password" ErrorText="Неправильный логин или пароль" Label="Пароль" Error="PasswordError" InputType="@InputType.Password"></MudTextField>
            <MudButton Color="Color.Default" OnClick="OnEnterButtonClicked">Войти</MudButton>
        </MudPaper>
    </div>
}
else if (DbNotFound)
{
    <div style="width:100%; height:100%">
        <MudPaper Class="pa-8" Style="max-width:fit-content;margin:auto;margin-top:15%" Square="true">
            <h3>Добро пожаловать!</h3>
            <h4>Для первого входа введите ключ для шифрования базы данных</h4>
            <p>Запомните данный код, в случае его утери доступ к базе данных будет невозможен</p>
            <MudTextField @bind-Value="@AdminKey" ErrorText="Неверный ключ" Label="Введите новый ключ администратора"></MudTextField>
            <MudButton Color="Color.Default" OnClick="OnKeyVerificationButtonClicked">Создать новый ключ</MudButton>
        </MudPaper>
    </div>
}
else
{
    <div style="width:100%; height:100%">
        <MudPaper Class="pa-8" Style="max-width:fit-content;margin:auto;margin-top:15%" Square="true">
            <h3>База данных зашифрована, введите ключ администратора</h3>
            <MudTextField @bind-Value="@AdminKey" ErrorText="Неверный ключ" Error=@AdminKeyError Label="Ключ администратора"></MudTextField>
            <MudButton Color="Color.Default" OnClick="OnKeyVerificationButtonClicked">Расшифровать базу данных</MudButton>
        </MudPaper>
    </div>
}
@code {
    public string LoginString { get; set; }
    public string AdminKey { get; set; }
    public bool AdminKeyError { get; set; }
    public string Password { get; set; } = string.Empty;
    public bool LoginError { get; set; }
    public bool PasswordError { get; set; }
    public bool DbIsOpen { get; set; } = false;
    public bool DbNotFound { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        using (var client = new HttpClient())
        {
            var response = await client.GetAsync("http://localhost:5282/Users/DBCondition");
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                DbIsOpen = true;
            }
            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                DbNotFound = true;
            }
        }
        await base.OnInitializedAsync();
    }
    public async Task OnKeyVerificationButtonClicked()
    {
        using (var client = new HttpClient())
        {
            var response = await client.GetAsync($"http://localhost:5282/Users/LoadDB?code={AdminKey}");
            if (response.IsSuccessStatusCode)
            {
                DbIsOpen = true;
            }
            else
            {
                AdminKeyError = true;
            }
        }
    }
    public async Task OnEnterButtonClicked()
    {
        using (var client = new HttpClient())
        {
            LoginError = false;
            PasswordError = false;
            var response = await client.PostAsJsonAsync<LoginRequest>("http://localhost:5282/Users", new LoginRequest() { Login = LoginString, Password = Password });
            if (response.StatusCode == System.Net.HttpStatusCode.PreconditionFailed)
            {
                LoginError = true;
                return;
            }
            if (!response.IsSuccessStatusCode)
            {
                PasswordError = true;
                return;
            }
            User user = await response.Content.ReadFromJsonAsync<User>();

            if (user != null)
            {
                if (_user == null)
                {
                    _user = new User();
                }
                _user.Login = user.Login;
                _user.Password = user.Password;
                _user.RegistrationDateTime = user.RegistrationDateTime;
                _user.Id = user.Id;
                _user.IsBanned = user.IsBanned;
                _user.HasSpecialRegistration = user.HasSpecialRegistration;
                if (user.Password == null || user.Password == string.Empty)
                {
                    _manager.NavigateTo("/changepassword");
                    return;
                }
                _manager.NavigateTo("/home");
            }
            else
            {
                PasswordError = true;
            }
        }
    }
}
